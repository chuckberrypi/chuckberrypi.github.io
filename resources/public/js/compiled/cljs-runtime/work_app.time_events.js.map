{"version":3,"sources":["work_app/time_events.cljs"],"mappings":"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","names":["work-app.time-events/quot-rem","cljs.core.juxt","cljs.core/quot","cljs.core/mod","work-app.time-events/order-step","work-app.time-events/log-var","var","js/console.log","cljs.core/name","var_args","G__51787","work-app.time-events/range-step","js/Error","work_app.time_events.range_step","step","start","cljs.core/LazySeq","cljs.core/cons","end","p1__51785#","cljs.core.take_while","work-app.time-events/chunks-of-gen","chunks-of","n","vec__51789","cljs.core.nth","q","r","cljs.core/abs","G__51792","cljs.core.repeat","cljs.core.not_EQ_","p1__51788#","cljs.core.map","re_frame.core.reg_event_db","db","_","work-app.schema/schema-update","cljs.core/not","G__51793","G__51794","re-posh.core/reg-event-fx","p__51795","vec__51796","t-ids","cljs.core.mapv","tid","p__51799","vec__51800","t-id","work_app.schema.schema_update","p__51803","vec__51804","key","c-id","work-app.schema/schema-assoc","re_frame.core.reg_event_fx","re_frame.core.inject_cofx","p__51807","map__51808","cljs.core/--destructure-map","cljs.core.get","now","year","month","day","new-date","js/Date","p__51809","vec__51810","date","G__51813","G__51814","G__51815","re-posh.core/inject-cofx","p__51816","p__51817","map__51818","vec__51819","seq__51820","cljs.core/seq","first__51821","cljs.core/first","cljs.core/next","vec__51822","ds","m-id","val","work-app.schema/schema-get","max-id","G__51825","G__51826","G__51827","G__51828","datascript.core/q","work_app.schema.schema_assoc","G__51829","G__51830","G__51831","p__51832","p__51833","map__51834","vec__51835","vec__51838","starting-time","G__51841","G__51842","G__51843","p__51844","map__51845","cljs.core/dissoc","p__51847","p__51848","map__51849","vec__51850","eid","p__51854","vec__51855","codes","cljs.core.reduce","acc","v","p__51864","vec__51865","p__51868","p__51869","map__51870","vec__51871","work-app.time-events/candidates-to-tx","candidates","delta","candidates-map","cljs.core.assoc","G__51878","vec__51879","seq__51880","first__51881","vec__51894","seq__51895","first__51896","d-first","d-rest","cand-map","changed","target-task","G__51898","cljs.core/vals","cljs.core.sort_by","cljs.core/reverse","cljs.core.drop_while","t","new-time","p1__51874#","cljs.core.filter","G__51905","p__51903","map__51904","e","time","cljs.core/assoc-in","js/Math.round","cljs.core.conj","work-app.time-events/time-filter","delt","G__51907","G__51908","G__51909","p__51910","p__51911","map__51912","vec__51913","map__51916","unlocked","task","datascript.core/entity","recipient-ids","p1__51906#","cljs.core.remove","cljs.core._EQ_","recipients","G__51917","G__51918","G__51919","G__51920","G__51921","recipient-total-time","cljs.core/+","transactions","cljs.core.into","cljs.core/count","G__51922","G__51923","G__51924","p__51925","p__51926","map__51927","vec__51928","map__51931","p__51933","p__51934","map__51936","vec__51937","start-timer","original-time","pull-result","G__51940","G__51941","G__51942","datascript.core/pull","old-time","p__51945","vec__51946","G__51949","G__51950","G__51951","p__51952","p__51953","map__51954","vec__51955","dropped-on","dragged-over-position","temp__5802__auto__","dragged","work-app.time-events/get-mid-by-tid","G__51958","G__51959","G__51960","work-app.time-events/get-sib-tasks-and-orders","G__51961","G__51962","G__51963","work-app.time-events/re-order-txs","index","sibs","beg","cljs.core.take","cljs.core.drop","new-raw","cljs.core.concat","txs","p1__51964#","p2__51965#","p__51966","map__51967","order","G__51968","G__51969","G__51970","p__51971","p__51972","map__51973","vec__51974","after?","map__51977","dropped-on-order","dropped-on-code","dropped-on-date","dropped-on-m","G__51978","G__51979","G__51980","dropped-on-mid","dragged-mid","p__51981","map__51982","p__51983","map__51984","o","fexpr__51985","cljs.core/>=","cljs.core/>","G__51986","G__51987","G__51988","p__51989","p__51990","map__51991","vec__51992","above","eids","G__51995","G__51996","G__51997","p__51998","p__51999","map__52000","vec__52001","map__52004","cofx","start?","description","id","matter-id","task-id","c","args","default-c","G__52005","G__52006","G__52007","new-t-id","new-order","or__5045__auto__","G__52008","G__52009","G__52010","G__52011","new-matter-order-vec","G__52012","G__52013","G__52014","new-task","p__52015","vec__52016","seq__52017","first__52018","uncheck?","p__52019","vec__52020","pos","G__52023","G__52024","G__52025","p__52026","p__52027","map__52028","vec__52029","map__52032","uuid","before-t-id","map__52033","vec__52034","before-code","before-order","before-date","matter","G__52037","G__52038","G__52039","later-tasks","cljs.core/second","G__52040","G__52041","G__52042","next-eid","order-above","re-order-above","next-order","js/Math.ceil","iter__5523__auto__","s__52044","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__52046","cljs.core/chunk-buffer","i__52045","vec__52047","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__52043","cljs.core/chunk-rest","vec__52050","cljs.core/rest","p__52053","vec__52054","no","G__52057","G__52058","G__52059","p__52060","p__52061","map__52062","vec__52063","map__52066","desc","cljs.core/chunk-first"],"sourcesContent":[";; (c) David F Stearns 2023\n(ns work-app.time-events\n  (:require\n   [work-app.schema :as schema :refer [app-schema schema-update schema-get schema-assoc]]\n   [work-app.macs :as mcr :include-macros true]\n\n   [re-frame.core :as rf]\n   [re-posh.core :as rp]\n   [malli.core :as m]\n   [malli.error :as me]\n   [malli.generator :as mg]\n   [malli.provider :as mp]\n   [malli.util :as mu]\n   [reagent.core :as r]\n   [goog.object :as go]\n\n   [datascript.core :as ds]\n   [work-app.subs :as s]))\n\n(def quot-rem\n  (juxt quot mod))\n\n(def order-step 64)\n\n(defn log-var [var]\n  (js/console.log (str (name (quote var)) \": \" var)))\n\n(defn range-step\n  ([] (range-step 1))\n  ([step] (range-step step 0))\n  ([step start] (lazy-seq (cons start (range-step step (+ start step)))))\n  ([step start end] (take-while #(> end %) (range-step step start))))\n\n(defn chunks-of-gen [chunks-of]\n  (fn [n]\n    (let [[q r] (quot-rem (abs n) chunks-of)]\n      (cond->> chunks-of\n        true (repeat q)\n        (not= 0 r) (cons r)\n        (neg? n) (map #(- %))))))\n\n(rf/reg-event-db ::toggle-move-dialog-visible\n                 (fn [db _]\n                   (schema-update db \"move-dialog-visible\" not)))\n\n(rp/reg-event-fx ::delete-tasks\n                 (fn [_ [_ t-ids]]\n                   {:transact (mapv (fn [tid] [:db/retractEntity tid]) t-ids)}))\n\n(rf/reg-event-db ::toggle-check\n                 (fn [db [_ t-id]]\n                   (schema-update db \"t-checked\" not {:sub-args [t-id]})))\n\n(rf/reg-event-db ::set-selected-code\n                 (fn [db [_ key c-id]]\n                   (schema-assoc db \"time-selected-code-key-and-id\" [key c-id])))\n\n(rf/reg-event-fx ::time-set-selected-date-today\n                 [(rf/inject-cofx :work-app.events/now)]\n                 (fn [{:keys [^js/Date now]} _]\n                   ;; extracting y-m-d prevents time from messing stuff up.\n                   (let [year (.getFullYear now)\n                         month (.getMonth now)\n                         day (.getDate now)\n                         new-date (js/Date. year month day)]\n                     {:fx [[:dispatch [::time-set-selected-date new-date]]]})))\n\n(rf/reg-event-db ::time-set-selected-date\n                 (fn [db [_ date]]\n                   (schema-assoc db \"time-selected-date\" date)))\n\n(rp/reg-event-fx ::set-matter-last-active-timer\n [(rp/inject-cofx :ds)]\n (fn [{:keys [db ds]} [_ m-id & [val]]]\n   (let [date (schema-get db \"time-selected-date\")\n         max-id (ds/q '[:find ?t-id .\n                        :in $ ?m-id ?date\n                        :where\n                        [?t-id :task/date ?date]\n                        [?m-id :matter/tasks ?t-id]\n                        ]\n                      ds m-id date)]\n     {:db (if val\n            (schema-assoc db \"matter-last-active-timer\" val m-id)\n            (schema-assoc db \"matter-last-active-timer\" max-id m-id))})))\n\n(rp/reg-event-fx ::start-task-timer\n                 [(rp/inject-cofx :ds)\n                  (rp/inject-cofx :work-app.events/now)]\n                 (fn [{:keys [db ds now]} [_ t-id]]\n                   (js/console.log now)\n                   (let [[m-id starting-time] ;(:db/id (ds/pull ds '[:matter/_tasks] t-id))\n                         (ds/q '[:find [?m ?time]\n                                 :in $ ?t-id\n                                 :where\n                                 [?m :matter/tasks ?t-id]\n                                 [?t-id :task/time ?time]]\n                                ds t-id)\n                         ]\n                     {:db (-> db\n                              (schema-assoc \"active-timer-m-id\" m-id)\n                              (schema-assoc \"active-timer-t-id\" t-id)\n                              (schema-assoc \"matter-last-active-timer\" t-id m-id))\n                     :fx [[:dispatch [:work-app.events/ticker-set-timed-event\n                                      {:id :active-timer\n                                       :interval 1\n                                       :task-id t-id\n                                       :event [::task-tick t-id now starting-time]}]]]})))\n\n(rf/reg-event-fx ::stop-task-timer\n                 (fn [{:keys [db]} _]\n                   {:db (-> db\n                            (schema-assoc \"active-timer-m-id\" false)\n                            (schema-assoc \"active-timer-t-id\" false)\n                            (schema-update \"ticker-tasks\" dissoc {:fn-args [:active-timer]}))}))\n\n(rf/reg-event-fx ::set-draggable\n                 (fn [{db :db} [_ eid val]]\n                   {:db (schema-assoc db \"draggable\" val eid)}))\n\n(rf/reg-event-db ::set-edit-mode\n                 (fn [db [_ codes val]]\n                   (reduce (fn [acc v]\n                             (schema-assoc acc \"code-edit-mode\" val v))\n                           db\n                           codes)\n                   ;; (schema-assoc db \"edit-mode\" val)\n                   ))\n\n(rf/reg-event-db ::toggle-code-edit\n                 (fn [db [_ c-id]]\n                   (schema-update db \"code-edit-mode\" not {:sub-args [c-id]})))\n\n(rf/reg-event-fx ::time-task-slider-lock-toggle\n                  (fn [{:keys [db]} [_ t-id]]\n                    {:db (schema-update db \"t-slider-locked\" not {:sub-args [t-id]})}))\n\n(defn candidates-to-tx [candidates delta]\n  (let [candidates-map (reduce (fn [acc v] (assoc acc (:e v) v)) {} candidates)]\n    (loop [[d-first & d-rest] ((chunks-of-gen 360) delta)\n           cand-map           candidates-map\n           changed            #{}]\n      (let [target-task (cond->> cand-map\n                          true           vals\n                          true           (sort-by :time)\n                          (pos? d-first) reverse\n                          (pos? delta)   (drop-while (fn [t] (< (:time t) 1)))\n                          true           first)\n            new-time    (- (:time target-task) d-first)]\n        (if (or\n             (nil? d-first)\n             (nil? target-task)\n             (> 0 new-time))\n          ;[changed cand-map]\n          (->> cand-map\n               vals\n               (filter #(changed (:e %)))\n               (mapv (fn [{:keys [e time]}] [:db/add e :task/time time])))\n          (recur d-rest\n                 (assoc-in cand-map [(:e target-task) :time] (js/Math.round new-time))\n                 (conj changed (:e target-task))))))))\n\n(defn time-filter [delt time]\n  (if (pos? delt)\n    (<= delt time)\n    true))\n\n(rp/reg-event-fx ::slider-change-locked-ds\n                 [(rp/inject-cofx :ds)]\n                 (fn [{:keys [ds db]} [_ {:keys [t-id time unlocked]}]]\n                   (let [task                 (ds/entity ds t-id)\n                         delta                (- time (:task/time task))\n                         recipient-ids        (remove #(= t-id %) unlocked)\n                         recipients           (ds/q '[:find ?e ?time\n                                                      :keys e time\n                                                      :in $ [?e ...] ?delt ?t-filter\n                                                      :where\n                                                      [?e :task/time ?time]\n                                                      [(?t-filter ?delt ?time)]]\n                                                    ds recipient-ids delta time-filter)\n                         recipient-total-time (->> recipients (map :time) (reduce +))\n                         transactions         (into [[:db/add t-id :task/time (js/Math.round time)]]\n                                                    (candidates-to-tx recipients delta))]\n                     {:fx       []\n                      :transact (if (or (< recipient-total-time delta)\n                                        (< (count recipients) 1))\n                                  []\n                                  transactions)})))\n\n(rp/reg-event-fx ::time-set-task-time-ds\n                 [(rp/inject-cofx :ds)]\n                 (fn [{:keys [ds]} [_ {:keys [t-id time]}]]\n                   {:transact [{:db/id t-id :task/time (js/Math.round time)}]}))\n\n(rf/reg-event-fx ::task-tick\n                 [(rp/inject-cofx :ds)\n                  (rp/inject-cofx :work-app.events/now)]\n                 (fn [{:keys [ds now]} [_ t-id start-timer original-time]]\n                   (let [pull-result (ds/pull ds '[:task/time] t-id)\n                         old-time    (:task/time pull-result)\n                         delt        (js/Math.round (/ (- now start-timer) 1000))\n                         new-time    (+ original-time delt)\n                         ]\n                     {:transact [[:db/add t-id :task/time new-time]]})))\n\n(rf/reg-event-db ::set-dragged-task\n                 (fn [db [_ t-id]]\n                   (schema-assoc db \"dragged-task\" t-id)))\n\n(rp/reg-event-fx ::task-drop\n                 [(rp/inject-cofx :ds)]\n                 (fn [{:keys [ds db]} [_ dropped-on dragged-over-position]]\n                   (if-let [dragged (schema-get db \"dragged-task\")]\n                     {:fx [[:dispatch [::insert-task-after-or-before dragged dropped-on (< 0.5 dragged-over-position)]]\n                           [:work-app.events/log (str \"dragged: \" dragged \"\\ndropped-on: \" dropped-on)]]})))\n\n(defn get-mid-by-tid [ds t-id]\n  (ds/q '[:find ?mid .\n          :in $ ?t-id\n          :where [?mid :matter/tasks ?t-id]]\n        ds t-id))\n\n(defn get-sib-tasks-and-orders [ds t-id]\n  (->>\n   (ds/q '[:find ?eid ?order\n               :keys eid order\n               :in $ ?t-id\n               :where\n                   [?t-id :task/date ?date]\n                   [?eid :task/date ?date]\n                   [?t-id :task/code ?code]\n                   [?eid :task/code ?code]\n                   [?m-id :matter/tasks ?t-id]\n                   [?m-id :matter/tasks ?eid]\n                   [?eid :task/order ?order]\n               ]\n             ds t-id)\n   (sort-by :order)\n   ;; (remove (fn [{eid :eid}] (= eid t-id)))\n   ))\n\n(defn re-order-txs [t-id index sibs]\n  (let [beg (take index sibs)\n        end (drop index sibs)\n        new-raw (concat beg [{:eid t-id}] end)\n        txs (->> (range-step order-step)\n         (map #(assoc %1 :order %2) new-raw)\n         (mapv (fn [{:keys [order eid]}] [:db/add eid :task/order order])))]\n    txs))\n\n(comment\n  (re-order-txs 999 -1 '({:order 0 :eid 0} {:order 1 :eid 1} {:order 2 :eid 2} {:order 3 :eid 3})))\n\n(rp/reg-event-fx ::insert-task-after-or-before\n                 [(rp/inject-cofx :ds)]\n                 (fn [{:keys [ds db]} [_ dragged dropped-on after?]]\n                   (let [{dropped-on-order :task/order\n                          dropped-on-code  :task/code\n                          dropped-on-date  :task/date\n                          dropped-on-m     :matter/_tasks} (ds/pull ds '[:matter/_tasks :task/order :task/code :task/date] dropped-on)\n                         dropped-on-mid                    (:db/id dropped-on-m)\n                         dragged-mid                       (get-mid-by-tid ds dragged)\n                         sibs                              (remove (fn [{eid :eid}] (= eid dragged)) (get-sib-tasks-and-orders ds dropped-on))\n                         index                             (count (take-while (fn [{o :order}] ((if after? >= >) dropped-on-order o)) sibs))\n                         txs                               (re-order-txs dragged index sibs)]\n                     {:transact (into\n                                 [[:db/retract dragged-mid :matter/tasks dragged]\n                                  [:db/add dropped-on-mid :matter/tasks dragged]\n                                  [:db/add dragged :task/code dropped-on-code]\n                                  [:db/add dragged :task/date dropped-on-date]\n                                  ]\n                                 txs)})))\n\n(rp/reg-event-fx ::re-order-above\n                 [(rp/inject-cofx :ds)]\n                 (fn [{:keys [ds]} [_ above eids]]\n                   {:fx [[:work-app.events/log (str \"re-order-above: \" above eids)]]\n                    :transact (mapv (fn [order eid]\n                                      [:db/add eid :task/order order])\n                                    (drop 1 (range-step order-step above))\n                                    eids)}))\n\n(rp/reg-event-fx ::add-task\n                 [(rp/inject-cofx :ds)]\n                 (fn [{:keys [ds db] :as cofx}\n                      [_ {:keys [start? description order time id date matter-id task-id c]\n                          :or   {start?      false\n                                 description \"\"\n                                 time        1\n                                 }\n                          :as   args}]]\n                   (let [default-c            (ds/q '[:find (min ?c-id) .\n                                                      :in $ ?m-id\n                                                      :where\n                                                      [?m-id :matter/codes ?c-id]]\n                                                    ds matter-id)\n                         new-t-id             (inc (:max-eid ds))\n                         new-order            (or order\n                                                  (+ order-step (ds/q '[:find (max ?order) .\n                                                                        :in $ ?m-id ?date\n                                                                        :where\n                                                                        [?t-id :task/date ?date]\n                                                                        [?m-id :matter/tasks ?t-id]\n                                                                        [?t-id :task/order ?order]]\n                                                                      ds matter-id date))\n                                                  (* 10 new-t-id))\n                         new-matter-order-vec (-> (ds/pull ds '[:matter/order-vec] matter-id)\n                                                  :matter/order-vec\n                                                  )\n                         new-task             {:db/id            new-t-id\n                                               :task/time        time\n                                               :task/date        date\n                                               :task/code        (or c default-c \"0\")\n                                               :task/description description\n                                               :task/order       new-order}]\n                     (js/console.log (str \"new-task: \" new-task))\n                     {:transact [[:db/add matter-id :matter/tasks new-t-id]\n                                 new-task]\n                      :fx       (if start?\n                                  [[:dispatch [::start-task-timer new-t-id]]]\n                                  [])})))\n\n(rf/reg-event-db ::check-tasks\n                 (fn [db [_ t-ids & uncheck?]]\n                   (reduce (fn [acc v]\n                             (schema-assoc acc \"t-checked\" (not uncheck?) v))\n                           db\n                           t-ids)))\n\n(rf/reg-event-db ::set-drag-over-position\n                 (fn [db [_ t-id pos]]\n                   (schema-assoc db \"drag-over-position\" pos t-id)))\n\n(rp/reg-event-fx ::add-task-after\n                 [(rp/inject-cofx :ds)\n                  (rp/inject-cofx :work-app.events/uuid)]\n                 (fn [{:keys [ds db uuid] :as cofx}\n                      [_ {:keys [before-t-id start? description]\n                          :or {description \"\"}}]]\n                   (let [{before-code  :task/code\n                          before-order :task/order\n                          before-date  :task/date\n                          matter       :matter/_tasks} (ds/pull\n                                                        ds\n                                                        '[:task/code :task/order :task/date :matter/_tasks]\n                                                        before-t-id)\n                         m-id                          (:db/id matter)\n                         later-tasks                   (sort-by\n                                                        second\n                                                        (ds/q '[:find ?t-id ?order\n                                                                :in $ ?t-id-prev\n                                                                :where\n                                                                [?m-id :matter/tasks ?t-id-prev]\n                                                                [?t-id-prev :task/date ?date]\n                                                                [?t-id :task/order ?order]\n                                                                [?t-id-prev :task/order ?old-order]\n                                                                [?m-id :matter/tasks ?t-id]\n                                                                [?t-id :task/date ?date]\n                                                                [(< ?old-order ?order)]\n                                                                ]\n                                                              ds before-t-id))\n                         [next-eid order-above] (first later-tasks)\n                         delt (- order-above before-order)\n                         re-order-above (> 2 delt)\n                         next-order (if re-order-above\n                                      (+ before-order order-step)\n                                      (+ before-order (js/Math.ceil (/ delt 2))))]\n                     {:fx [[:dispatch [::add-task {:matter-id m-id\n                                                   :date      before-date\n                                                   :description description\n                                                   :time      1\n                                                   :order     (inc before-order)\n                                                   :c         before-code\n                                                   :start?    start?}]]]\n                      :transact (if re-order-above\n                                  (into []\n                                       (for [[t-id new-order] (map (fn [[t-id _] no] [t-id no])\n                                                                   later-tasks\n                                                                   (drop 1 (range-step order-step next-order)))]\n                                         [:db/add t-id :task/order new-order]))\n                                  [])})))\n\n(rp/reg-event-fx ::task-set-desc\n                 [(rf/inject-cofx :ds)]\n                 (fn [{:keys [ds db]} [_ {:keys [task-id desc]}]]\n                   {:transact [[:db/add task-id :task/description desc]]}))\n"]}